name: Intel Linux Build
on: [push, pull_request, workflow_dispatch]

# Use custom shell with -l so .bash_profile is sourced which loads intel/oneapi/setvars.sh
# without having to do it in manually every step
defaults:
  run:
    shell: bash -leo pipefail {0}

# Set I_MPI_CC/F90 so Intel MPI wrapper uses icc/ifort instead of gcc/gfortran
env:
  cache_key: intel6  # The number (#) following the cache_key "intel" is to flush Action cache.
  CC: icc
  FC: ifort
  CXX: icpc
  I_MPI_CC: icc
  I_MPI_F90: ifort

# A note on flushing Action cache and relevance to "cache_key" above.
# There is no way to flush the Action cache, and hence a number (#) is appended
# to the "cache_key" (intel).
# If the dependencies change, increment this number and a new cache will be
# generated by the dependency build step "setup"
# There is a Github issue to force clear the cache.
# See discussion on:
# https://stackoverflow.com/questions/63521430/clear-cache-in-github-actions

# Cancel in-progress workflows when pushing to a branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# The jobs are split into:
# 1. a dependency build step (setup), and
# 2. a UPP build step (build)
# The setup is run once and the environment is cached,
# so each build of UPP can reuse the cached dependencies to save time (and compute).

jobs:
  setup:
    runs-on: ubuntu-20.04

    steps:

      - name: install-intel-compilers
        uses: NOAA-EMC/ci-install-intel-toolkit@develop
        with:
          install-oneapi: false
          install-mpi: true
          mpi-version: 2021.10.0
          cache: false

      - name: checkout-upp  # This is for getting spack.yaml
        if: steps.cache-env.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
            path: UPP

      # Cache spack, compiler and dependencies
      - name: cache-env
        id: cache-env
        uses: actions/cache@v3
        with:
          path: |
            /dev/shm/spack
            ~/.spack
            /opt/intel
          key: spack-${{ runner.os }}-${{ env.cache_key }}-${{ hashFiles('UPP/ci/spack.yaml') }}

      # Install dependencies using Spack
      - name: install-dependencies-with-spack
        if: steps.cache-env.outputs.cache-hit != 'true'
        run: |
          cd /dev/shm
          git clone -c feature.manyFiles=true https://github.com/NOAA-EMC/spack.git
          source spack/share/spack/setup-env.sh
          spack env create upp-env $GITHUB_WORKSPACE/UPP/ci/spack.yaml
          spack env activate upp-env
          spack compiler find
          sudo apt install cmake
          spack external find
          spack config add "packages:all:prefer:'%intel'"
          spack config add "packages:mpi:require:intel-oneapi-mpi"
          spack config add "packages:mpi:buildable:false"
          spack concretize
          spack install --dirty --fail-fast

  build:
    needs: setup
    runs-on: ubuntu-20.04

    steps:
      - name: checkout-upp
        uses: actions/checkout@v2
        with:
            path: UPP

      - name: install-intel
        run: |
          echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile

      - name: cache-env
        id: cache-env
        uses: actions/cache@v3
        with:
          path: |
            /dev/shm/spack
            ~/.spack
            /opt/intel
          key: spack-${{ runner.os }}-${{ env.cache_key }}-${{ hashFiles('UPP/ci/spack.yaml') }}

      - name: build-upp
        run: |
          cd /dev/shm
          source spack/share/spack/setup-env.sh
          spack env activate upp-env
          spack config add "packages:all:prefer:['%intel']"
          export CC=mpiicc
          export FC=mpiifort
          cd UPP
          mkdir -p build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=../install ..
          make VERBOSE=1
          make install
